
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: solar-projects-db
    environment:
      POSTGRES_DB: SolarProjectsDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - solar-projects-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d SolarProjectsDb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # .NET REST API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: solar-projects-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=SolarProjectsDb;Username=postgres;Password=postgres;Port=5432
      - JwtSettings__SecretKey=SolarProjects2024-SuperSecretKey-ForJWT-Authentication-Security-32Plus-Characters!
      - JwtSettings__Issuer=http://localhost:5001
      - JwtSettings__Audience=http://localhost:5001
      - JwtSettings__ExpirationMinutes=60
      - CloudinarySettings__CloudName=
      - CloudinarySettings__ApiKey=
      - CloudinarySettings__ApiSecret=
    ports:
      - "5001:8080"
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - solar-projects-network
    restart: unless-stopped

networks:
  solar-projects-network:
    driver: bridge

volumes:
  postgres_data:
    