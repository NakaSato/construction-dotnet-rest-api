// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dotnet_rest_api.Data;

#nullable disable

namespace dotnet_rest_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250630161435_AddSignalRNotificationSupport")]
    partial class AddSignalRNotificationSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dotnet_rest_api.Models.CalendarEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Attendees")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MeetingUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ReminderMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("EventId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EndDateTime");

                    b.HasIndex("EventType");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StartDateTime");

                    b.HasIndex("Status");

                    b.HasIndex("TaskId");

                    b.ToTable("CalendarEvent");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.DailyReport", b =>
                {
                    b.Property<Guid>("DailyReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GeneralNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("Humidity")
                        .HasColumnType("integer");

                    b.Property<string>("Issues")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("PersonnelOnSite")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("QualityIssues")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uuid");

                    b.Property<string>("SafetyIncidents")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SubmittedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<double?>("TemperatureHigh")
                        .HasColumnType("double precision");

                    b.Property<double?>("TemperatureLow")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalWorkHours")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WeatherCondition")
                        .HasColumnType("text");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("double precision");

                    b.Property<string>("WorkAccomplished")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WorkPlanned")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("DailyReportId");

                    b.HasIndex("SubmittedByUserId");

                    b.HasIndex("ProjectId", "ReportDate")
                        .HasDatabaseName("IX_DailyReports_ProjectId_ReportDate");

                    b.HasIndex("ReporterId", "ReportDate")
                        .HasDatabaseName("IX_DailyReports_ReporterId_ReportDate");

                    b.ToTable("DailyReports");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.DailyReportAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DailyReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DailyReportId");

                    b.ToTable("DailyReportAttachments");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.EquipmentLog", b =>
                {
                    b.Property<Guid>("EquipmentLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DailyReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("HoursUsed")
                        .HasColumnType("double precision");

                    b.Property<string>("Issues")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MaintenanceNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("MaintenanceRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("OperatorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EquipmentLogId");

                    b.HasIndex("DailyReportId");

                    b.ToTable("EquipmentLogs");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ImageMetadata", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CaptureTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CloudStorageKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("DailyReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceModel")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EXIFData")
                        .HasColumnType("jsonb");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<double?>("GPSLatitude")
                        .HasPrecision(18, 12)
                        .HasColumnType("double precision");

                    b.Property<double?>("GPSLongitude")
                        .HasPrecision(18, 12)
                        .HasColumnType("double precision");

                    b.Property<short?>("Orientation")
                        .HasColumnType("smallint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UploadedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("ImageId");

                    b.HasIndex("DailyReportId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UploadedByUserId");

                    b.HasIndex("WorkRequestId");

                    b.ToTable("ImageMetadata");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.MasterPlan", b =>
                {
                    b.Property<Guid>("MasterPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalEstimatedBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalPlannedDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("MasterPlanId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("MasterPlans");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.MaterialUsage", b =>
                {
                    b.Property<Guid>("MaterialUsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DailyReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double>("QuantityUsed")
                        .HasColumnType("double precision");

                    b.Property<string>("Supplier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("MaterialUsageId");

                    b.HasIndex("DailyReportId");

                    b.ToTable("MaterialUsages");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.PersonnelLog", b =>
                {
                    b.Property<Guid>("PersonnelLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DailyReportId")
                        .HasColumnType("uuid");

                    b.Property<double>("HoursWorked")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PersonnelLogId");

                    b.HasIndex("DailyReportId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonnelLogs");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.PhaseProgress", b =>
                {
                    b.Property<Guid>("PhaseProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActivitiesCompleted")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Issues")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("PhaseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PlannedCompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ProgressReportId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ProgressVariance")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("PhaseProgressId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ProgressReportId");

                    b.ToTable("PhaseProgresses");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.PhaseResource", b =>
                {
                    b.Property<Guid>("PhaseResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualQuantityUsed")
                        .HasColumnType("numeric");

                    b.Property<int>("AllocationStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("PhaseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QuantityRequired")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ResourceType")
                        .HasColumnType("integer");

                    b.Property<string>("Supplier")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("TotalEstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PhaseResourceId");

                    b.HasIndex("AllocationStatus");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ResourceType");

                    b.ToTable("PhaseResource");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProgressReport", b =>
                {
                    b.Property<Guid>("ProgressReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActiveIssuesCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("ActualCostToDate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BudgetVariance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ChallengesFaced")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("CompletedMilestonesCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("CostPerformanceIndex")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentChallenges")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("EstimatedCostAtCompletion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExecutiveSummary")
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<int>("HealthStatus")
                        .HasColumnType("integer");

                    b.Property<string>("KeyAccomplishments")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("MasterPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("NextSteps")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("OverallCompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProjectedCompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QualityNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ReportContent")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ResourceNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RiskSummary")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal>("SchedulePerformanceIndex")
                        .HasColumnType("decimal(5,4)");

                    b.Property<int>("ScheduleVarianceDays")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMilestonesCount")
                        .HasColumnType("integer");

                    b.Property<string>("UpcomingActivities")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WeatherImpact")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("ProgressReportId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HealthStatus");

                    b.HasIndex("MasterPlanId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReportDate");

                    b.ToTable("ProgressReports");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("numeric");

                    b.Property<string>("ClientInfo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ConnectionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ConnectionType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EstimatedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FtsValue")
                        .HasColumnType("integer");

                    b.Property<int?>("Inverter125kw")
                        .HasColumnType("integer");

                    b.Property<int?>("Inverter40kw")
                        .HasColumnType("integer");

                    b.Property<int?>("Inverter60kw")
                        .HasColumnType("integer");

                    b.Property<int?>("Inverter80kw")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,7)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10,7)");

                    b.Property<int?>("PqmValue")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PvModuleCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RevenueValue")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("TotalCapacityKw")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProjectMilestone", b =>
                {
                    b.Property<Guid>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CompletedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompletionCriteria")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("CompletionEvidence")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Importance")
                        .HasColumnType("integer");

                    b.Property<Guid>("MasterPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("MilestoneName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("VerifiedById")
                        .HasColumnType("uuid");

                    b.Property<decimal>("WeightPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("MilestoneId");

                    b.HasIndex("MasterPlanId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("PlannedDate");

                    b.HasIndex("Status");

                    b.HasIndex("VerifiedById");

                    b.ToTable("ProjectMilestones");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProjectPhase", b =>
                {
                    b.Property<Guid>("PhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("EstimatedBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("MasterPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("PhaseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PhaseOrder")
                        .HasColumnType("integer");

                    b.Property<int>("PlannedDurationDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prerequisites")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("WeightPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("PhaseId");

                    b.HasIndex("MasterPlanId");

                    b.HasIndex("PhaseOrder");

                    b.HasIndex("Status");

                    b.ToTable("ProjectPhases");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProjectTask", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualHours")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("AssignedTechnicianId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Dependencies")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EstimatedHours")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("WeightInPhase")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("TaskId");

                    b.HasIndex("AssignedTechnicianId");

                    b.HasIndex("CompletionPercentage");

                    b.HasIndex("PhaseId");

                    b.HasIndex("Priority");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Viewer"
                        });
                });

            modelBuilder.Entity("dotnet_rest_api.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualHours")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EstimatedHours")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.TaskProgressReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("HoursWorked")
                        .HasColumnType("numeric");

                    b.Property<string>("Issues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NextSteps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskProgressReport");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@solarprojects.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            PasswordHash = "$2a$11$rqiU3ov8V4yGqQpzYpKqY.Y5p3YmXFKJZk8GvOqHqOqh4v7/7gzMu",
                            RoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WeeklyReport", b =>
                {
                    b.Property<Guid>("WeeklyReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<int>("CompletionPercentage")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DelaysReported")
                        .HasColumnType("integer");

                    b.Property<string>("Lookahead")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("MajorAccomplishments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("[]");

                    b.Property<string>("MajorIssues")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("[]");

                    b.Property<int>("PanelsInstalled")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("SafetyIncidents")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubmittedById")
                        .HasColumnType("uuid");

                    b.Property<string>("SummaryOfProgress")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("TotalManHours")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("WeeklyReportId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("SubmittedById");

                    b.HasIndex("WeekStartDate");

                    b.ToTable("WeeklyReport");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WeeklyWorkRequest", b =>
                {
                    b.Property<Guid>("WeeklyRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CriticalMaterials")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("EstimatedHours")
                        .HasColumnType("integer");

                    b.Property<string>("KeyTasks")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("[]");

                    b.Property<string>("MajorEquipment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("OverallGoals")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("PersonnelForecast")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("WeeklyRequestId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("Status");

                    b.HasIndex("WeekStartDate");

                    b.ToTable("WeeklyWorkRequest");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkProgressItem", b =>
                {
                    b.Property<Guid>("WorkProgressItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DailyReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double>("HoursWorked")
                        .HasColumnType("double precision");

                    b.Property<string>("Issues")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("NextSteps")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PercentageComplete")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkersAssigned")
                        .HasColumnType("integer");

                    b.HasKey("WorkProgressItemId");

                    b.HasIndex("DailyReportId");

                    b.HasIndex("TaskId");

                    b.ToTable("WorkProgressItems");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequest", b =>
                {
                    b.Property<Guid>("WorkRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("numeric");

                    b.Property<double?>("ActualHours")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("AdminApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AdminApproverId")
                        .HasColumnType("uuid");

                    b.Property<string>("AdminComments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AutoApprovalThreshold")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<double?>("EstimatedHours")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsAutoApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ManagerApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ManagerApproverId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManagerComments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RequestedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequiresAdminApproval")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresManagerApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("Resolution")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedForApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("WorkRequestId");

                    b.HasIndex("AdminApproverId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("ManagerApproverId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestedById");

                    b.ToTable("WorkRequests");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestApproval", b =>
                {
                    b.Property<Guid>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("EscalatedFromId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EscalationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EscalationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("NewStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("WorkRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("ApprovalId");

                    b.HasIndex("Action");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EscalatedFromId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("WorkRequestId");

                    b.ToTable("WorkRequestApprovals");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestComment", b =>
                {
                    b.Property<Guid>("WorkRequestCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("WorkRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkRequestCommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("WorkRequestId");

                    b.ToTable("WorkRequestComments");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestNotification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailCc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EmailTo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ReadAt");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("WorkRequestId");

                    b.ToTable("WorkRequestNotifications");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestTask", b =>
                {
                    b.Property<Guid>("WorkRequestTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("ActualHours")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("EstimatedHours")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkRequestTaskId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("WorkRequestId");

                    b.ToTable("WorkRequestTasks");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.CalendarEvent", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet_rest_api.Models.ProjectTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.DailyReport", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.User", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");

                    b.Navigation("Reporter");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.DailyReportAttachment", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.DailyReport", "DailyReport")
                        .WithMany()
                        .HasForeignKey("DailyReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyReport");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.EquipmentLog", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.DailyReport", "DailyReport")
                        .WithMany("EquipmentLogs")
                        .HasForeignKey("DailyReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyReport");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ImageMetadata", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.DailyReport", "DailyReport")
                        .WithMany("Images")
                        .HasForeignKey("DailyReportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.ProjectTask", "Task")
                        .WithMany("Images")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.User", "UploadedByUser")
                        .WithMany("UploadedImages")
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.WorkRequest", "WorkRequest")
                        .WithMany("Images")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DailyReport");

                    b.Navigation("Project");

                    b.Navigation("Task");

                    b.Navigation("UploadedByUser");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.MasterPlan", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithOne("MasterPlan")
                        .HasForeignKey("dotnet_rest_api.Models.MasterPlan", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.MaterialUsage", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.DailyReport", "DailyReport")
                        .WithMany("MaterialUsages")
                        .HasForeignKey("DailyReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyReport");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.PersonnelLog", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.DailyReport", "DailyReport")
                        .WithMany("PersonnelLogs")
                        .HasForeignKey("DailyReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DailyReport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.PhaseProgress", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.ProjectPhase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.ProgressReport", "ProgressReport")
                        .WithMany("PhaseProgressDetails")
                        .HasForeignKey("ProgressReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phase");

                    b.Navigation("ProgressReport");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.PhaseResource", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.ProjectPhase", "Phase")
                        .WithMany("Resources")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProgressReport", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.MasterPlan", "MasterPlan")
                        .WithMany("ProgressReports")
                        .HasForeignKey("MasterPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("MasterPlan");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.Project", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "ProjectManager")
                        .WithMany("ManagedProjects")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProjectMilestone", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.MasterPlan", "MasterPlan")
                        .WithMany("Milestones")
                        .HasForeignKey("MasterPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.ProjectPhase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.User", "VerifiedBy")
                        .WithMany()
                        .HasForeignKey("VerifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MasterPlan");

                    b.Navigation("Phase");

                    b.Navigation("VerifiedBy");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProjectPhase", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.MasterPlan", "MasterPlan")
                        .WithMany("Phases")
                        .HasForeignKey("MasterPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterPlan");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProjectTask", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "AssignedTechnician")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedTechnicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.ProjectPhase", "Phase")
                        .WithMany("Tasks")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTechnician");

                    b.Navigation("Phase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.Task", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("dotnet_rest_api.Models.MasterPlan", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId");

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Phase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.TaskProgressReport", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.Task", "Task")
                        .WithMany("ProgressReports")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.User", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WeeklyReport", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.User", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Project");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WeeklyWorkRequest", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Project");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkProgressItem", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.DailyReport", "DailyReport")
                        .WithMany("WorkProgressItems")
                        .HasForeignKey("DailyReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.ProjectTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DailyReport");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequest", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "AdminApprover")
                        .WithMany()
                        .HasForeignKey("AdminApproverId");

                    b.HasOne("dotnet_rest_api.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.User", "ManagerApprover")
                        .WithMany()
                        .HasForeignKey("ManagerApproverId");

                    b.HasOne("dotnet_rest_api.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.User", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdminApprover");

                    b.Navigation("AssignedTo");

                    b.Navigation("ManagerApprover");

                    b.Navigation("Project");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestApproval", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.WorkRequestApproval", "EscalatedFrom")
                        .WithMany("Escalations")
                        .HasForeignKey("EscalatedFromId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.WorkRequest", "WorkRequest")
                        .WithMany("ApprovalHistory")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("EscalatedFrom");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestComment", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.WorkRequest", "WorkRequest")
                        .WithMany("Comments")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestNotification", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnet_rest_api.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.WorkRequest", "WorkRequest")
                        .WithMany("Notifications")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestTask", b =>
                {
                    b.HasOne("dotnet_rest_api.Models.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnet_rest_api.Models.WorkRequest", "WorkRequest")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.DailyReport", b =>
                {
                    b.Navigation("EquipmentLogs");

                    b.Navigation("Images");

                    b.Navigation("MaterialUsages");

                    b.Navigation("PersonnelLogs");

                    b.Navigation("WorkProgressItems");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.MasterPlan", b =>
                {
                    b.Navigation("Milestones");

                    b.Navigation("Phases");

                    b.Navigation("ProgressReports");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProgressReport", b =>
                {
                    b.Navigation("PhaseProgressDetails");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.Project", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("MasterPlan");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProjectPhase", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.ProjectTask", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.Task", b =>
                {
                    b.Navigation("ProgressReports");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("ManagedProjects");

                    b.Navigation("UploadedImages");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequest", b =>
                {
                    b.Navigation("ApprovalHistory");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Notifications");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("dotnet_rest_api.Models.WorkRequestApproval", b =>
                {
                    b.Navigation("Escalations");
                });
#pragma warning restore 612, 618
        }
    }
}
