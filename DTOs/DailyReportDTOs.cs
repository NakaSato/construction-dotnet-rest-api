using System.ComponentModel.DataAnnotations;

namespace dotnet_rest_api.DTOs;

/// <summary>
/// Enhanced Daily Report DTO with comprehensive project context
/// </summary>
public class EnhancedDailyReportDto : DailyReportDto
{
    // Project Context Information
    public string ProjectCode { get; set; } = string.Empty;
    public string ProjectLocation { get; set; } = string.Empty;
    public string ProjectManagerName { get; set; } = string.Empty;
    public string ClientName { get; set; } = string.Empty;
    
    // Enhanced Weather Data
    public string WeatherDescription { get; set; } = string.Empty;
    public double? UVIndex { get; set; }
    public string? WeatherImpact { get; set; } // None, Minor, Moderate, Severe
    
    // Progress Metrics
    public double OverallProgressPercentage { get; set; }
    public double DailyProgressContribution { get; set; }
    public int PlannedVsActualHoursVariance { get; set; }
    
    // Quality & Safety Metrics
    public int SafetyScore { get; set; } // 1-10 scale
    public int QualityScore { get; set; } // 1-10 scale
    public bool HasCriticalIssues { get; set; }
    public bool RequiresManagerAttention { get; set; }
    
    // Team & Resource Information
    public List<PersonnelSummaryDto> TeamMembers { get; set; } = new();
    public List<EquipmentSummaryDto> EquipmentUsed { get; set; } = new();
    public List<MaterialConsumptionDto> MaterialsConsumed { get; set; } = new();
    
    // Task Progress Summary
    public List<TaskProgressSummaryDto> TaskProgressSummary { get; set; } = new();
    
    // Approval Workflow
    public string ApprovalStatus { get; set; } = "Draft"; // Draft, Submitted, UnderReview, Approved, Rejected, RevisionRequired
    public UserDto? ApprovedBy { get; set; }
    public DateTime? ApprovalDate { get; set; }
    public List<ApprovalHistoryDto> ApprovalHistory { get; set; } = new();
    
    // File Attachments
    public List<ReportAttachmentDto> Attachments { get; set; } = new();
    public int PhotoCount { get; set; }
    public int DocumentCount { get; set; }
    
    // Analytics & Insights
    public List<string> AutoGeneratedInsights { get; set; } = new();
    public List<string> RecommendedActions { get; set; } = new();
    
    // Timestamps
    public DateTime? LastModifiedAt { get; set; }
    public string LastModifiedBy { get; set; } = string.Empty;
}

/// <summary>
/// Comprehensive create request with enhanced validation
/// </summary>
public class EnhancedCreateDailyReportRequest
{
    [Required(ErrorMessage = "Project ID is required and must reference an active project")]
    public Guid ProjectId { get; set; }

    [Required(ErrorMessage = "Report date is required")]
    [DataType(DataType.Date)]
    public DateTime ReportDate { get; set; }

    // Weather Information (Enhanced)
    [RegularExpression(@"^(Sunny|PartlyCloudy|Cloudy|Overcast|LightRain|HeavyRain|Thunderstorm|Snow|Fog|Windy)$")]
    public string? WeatherCondition { get; set; }
    
    [Range(-50, 60, ErrorMessage = "Temperature must be between -50째C and 60째C")]
    public double? Temperature { get; set; }
    
    [Range(0, 100, ErrorMessage = "Humidity must be between 0% and 100%")]
    public int? Humidity { get; set; }
    
    [Range(0, 250, ErrorMessage = "Wind speed must be between 0 and 250 km/h")]
    public double? WindSpeed { get; set; }
    
    [StringLength(500, ErrorMessage = "Weather description cannot exceed 500 characters")]
    public string? WeatherDescription { get; set; }
    
    [StringLength(100, ErrorMessage = "Weather impact assessment cannot exceed 100 characters")]
    public string? WeatherImpact { get; set; }

    // Work Summary (Enhanced)
    [Required(ErrorMessage = "Work summary is required")]
    [StringLength(3000, MinimumLength = 10, ErrorMessage = "Work summary must be between 10 and 3000 characters")]
    public string WorkSummary { get; set; } = string.Empty;
    
    [StringLength(2000, ErrorMessage = "Work accomplished cannot exceed 2000 characters")]
    public string? WorkAccomplished { get; set; }
    
    [StringLength(2000, ErrorMessage = "Work planned for next day cannot exceed 2000 characters")]
    public string? WorkPlannedNextDay { get; set; }
    
    [StringLength(2000, ErrorMessage = "Issues encountered cannot exceed 2000 characters")]
    public string? IssuesEncountered { get; set; }

    // Hours and Personnel
    [Required(ErrorMessage = "Total work hours is required")]
    [Range(0.5, 24, ErrorMessage = "Total work hours must be between 0.5 and 24 hours")]
    public double TotalWorkHours { get; set; }
    
    [Required(ErrorMessage = "Personnel count is required")]
    [Range(1, 50, ErrorMessage = "Personnel on site must be between 1 and 50")]
    public int PersonnelOnSite { get; set; }

    // Safety and Quality
    [Range(1, 10, ErrorMessage = "Safety score must be between 1 and 10")]
    public int SafetyScore { get; set; } = 10;
    
    [Range(1, 10, ErrorMessage = "Quality score must be between 1 and 10")]
    public int QualityScore { get; set; } = 10;
    
    [StringLength(1500, ErrorMessage = "Safety incidents cannot exceed 1500 characters")]
    public string? SafetyIncidents { get; set; }
    
    [StringLength(1500, ErrorMessage = "Quality issues cannot exceed 1500 characters")]
    public string? QualityIssues { get; set; }

    // Progress Information
    [Range(0, 100, ErrorMessage = "Daily progress contribution must be between 0% and 100%")]
    public double DailyProgressContribution { get; set; }

    // Additional Notes
    [StringLength(3000, ErrorMessage = "Additional notes cannot exceed 3000 characters")]
    public string? AdditionalNotes { get; set; }

    // Collections
    public List<CreateWorkProgressItemRequest> WorkProgressItems { get; set; } = new();
    public List<CreatePersonnelLogRequest> PersonnelLogs { get; set; } = new();
    public List<CreateMaterialUsageRequest> MaterialUsages { get; set; } = new();
    public List<CreateEquipmentLogRequest> EquipmentLogs { get; set; } = new();
}

/// <summary>
/// Enhanced update request with partial update support
/// </summary>
public class EnhancedUpdateDailyReportRequest
{
    [StringLength(3000, MinimumLength = 10, ErrorMessage = "Work summary must be between 10 and 3000 characters")]
    public string? WorkSummary { get; set; }
    
    [StringLength(2000, ErrorMessage = "Work accomplished cannot exceed 2000 characters")]
    public string? WorkAccomplished { get; set; }
    
    [StringLength(2000, ErrorMessage = "Work planned for next day cannot exceed 2000 characters")]
    public string? WorkPlannedNextDay { get; set; }
    
    [StringLength(2000, ErrorMessage = "Issues encountered cannot exceed 2000 characters")]
    public string? IssuesEncountered { get; set; }

    // Weather Information
    [RegularExpression(@"^(Sunny|PartlyCloudy|Cloudy|Overcast|LightRain|HeavyRain|Thunderstorm|Snow|Fog|Windy)$")]
    public string? WeatherCondition { get; set; }
    
    [Range(-50, 60, ErrorMessage = "Temperature must be between -50째C and 60째C")]
    public double? Temperature { get; set; }
    
    [Range(0, 100, ErrorMessage = "Humidity must be between 0% and 100%")]
    public int? Humidity { get; set; }
    
    [Range(0, 250, ErrorMessage = "Wind speed must be between 0 and 250 km/h")]
    public double? WindSpeed { get; set; }
    
    [StringLength(500, ErrorMessage = "Weather description cannot exceed 500 characters")]
    public string? WeatherDescription { get; set; }

    // Hours and Personnel
    [Range(0.5, 24, ErrorMessage = "Total work hours must be between 0.5 and 24 hours")]
    public double? TotalWorkHours { get; set; }
    
    [Range(1, 50, ErrorMessage = "Personnel on site must be between 1 and 50")]
    public int? PersonnelOnSite { get; set; }

    // Safety and Quality
    [Range(1, 10, ErrorMessage = "Safety score must be between 1 and 10")]
    public int? SafetyScore { get; set; }
    
    [Range(1, 10, ErrorMessage = "Quality score must be between 1 and 10")]
    public int? QualityScore { get; set; }
    
    [StringLength(1500, ErrorMessage = "Safety incidents cannot exceed 1500 characters")]
    public string? SafetyIncidents { get; set; }
    
    [StringLength(1500, ErrorMessage = "Quality issues cannot exceed 1500 characters")]
    public string? QualityIssues { get; set; }

    // Progress Information
    [Range(0, 100, ErrorMessage = "Daily progress contribution must be between 0% and 100%")]
    public double? DailyProgressContribution { get; set; }

    // Additional Notes
    [StringLength(3000, ErrorMessage = "Additional notes cannot exceed 3000 characters")]  
    public string? AdditionalNotes { get; set; }
}

/// <summary>
/// Enhanced query parameters with advanced filtering
/// </summary>
public class EnhancedDailyReportQueryParameters : BaseQueryParameters
{
    // Project-based filtering
    [Required(ErrorMessage = "Project ID is required for Daily Report queries")]
    public Guid ProjectId { get; set; }
    
    // Date range filtering
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public DateTime? ExactDate { get; set; }
    
    // Status filtering
    public List<string> ApprovalStatuses { get; set; } = new();
    public bool? HasCriticalIssues { get; set; }
    public bool? RequiresManagerAttention { get; set; }
    
    // Personnel filtering
    public List<Guid> ReporterIds { get; set; } = new();
    public List<Guid> ApproverIds { get; set; } = new();
    
    // Weather filtering
    public List<string> WeatherConditions { get; set; } = new();
    public string? WeatherImpact { get; set; }
    
    // Score filtering
    public int? MinSafetyScore { get; set; }
    public int? MinQualityScore { get; set; }
    
    // Progress filtering
    public double? MinProgressContribution { get; set; }
    public double? MaxProgressContribution { get; set; }
    
    // Hours filtering
    public double? MinWorkHours { get; set; }
    public double? MaxWorkHours { get; set; }
    
    // Attachments filtering
    public bool? HasPhotos { get; set; }
    public bool? HasDocuments { get; set; }
    
    // Advanced sorting
    public new string? SortBy { get; set; } = "ReportDate"; // ReportDate, SafetyScore, QualityScore, ProgressContribution, TotalHours
    public bool IsSortDescending { get; set; } = true;
    
    // Analytics options
    public bool IncludeAnalytics { get; set; } = false;
    public bool IncludeInsights { get; set; } = false;
    public bool IncludeAttachments { get; set; } = true;
}

/// <summary>
/// Supporting DTOs for enhanced daily reports
/// </summary>
public class PersonnelSummaryDto
{
    public Guid UserId { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Role { get; set; } = string.Empty;
    public double HoursWorked { get; set; }
    public string? SpecialAssignments { get; set; }
}

public class EquipmentSummaryDto
{
    public Guid EquipmentId { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public double HoursUsed { get; set; }
    public string? Condition { get; set; }
    public string? Issues { get; set; }
}

public class MaterialConsumptionDto
{
    public Guid MaterialId { get; set; }
    public string Name { get; set; } = string.Empty;
    public double QuantityUsed { get; set; }
    public string Unit { get; set; } = string.Empty;
    public decimal? UnitCost { get; set; }
    public decimal? TotalCost { get; set; }
}

public class TaskProgressSummaryDto
{
    public Guid TaskId { get; set; }
    public string TaskName { get; set; } = string.Empty;
    public double StartPercentage { get; set; }
    public double EndPercentage { get; set; }
    public double ProgressMade { get; set; }
    public string Status { get; set; } = string.Empty;
    public bool IsOnSchedule { get; set; }
}

public class ApprovalHistoryDto
{
    public Guid Id { get; set; }
    public string Action { get; set; } = string.Empty; // Submitted, Approved, Rejected, RevisionRequested
    public Guid ActorId { get; set; }
    public string ActorName { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
    public string? Comments { get; set; }
    public string? RejectionReason { get; set; }
}

public class ReportAttachmentDto
{
    public Guid Id { get; set; }
    public string FileName { get; set; } = string.Empty;
    public string FileType { get; set; } = string.Empty;
    public long FileSize { get; set; }
    public string Category { get; set; } = string.Empty; // Photo, Document, Video, Other
    public string? Description { get; set; }
    public DateTime UploadedAt { get; set; }
    public Guid UploadedBy { get; set; }
    public string UploaderName { get; set; } = string.Empty;
    public string? ThumbnailUrl { get; set; }
    public string DownloadUrl { get; set; } = string.Empty;
}

/// <summary>
/// Analytics and reporting DTOs
/// </summary>
public class DailyReportAnalyticsDto
{
    public Guid ProjectId { get; set; }
    public string ProjectName { get; set; } = string.Empty;
    public DateTime AnalysisPeriodStart { get; set; }
    public DateTime AnalysisPeriodEnd { get; set; }
    
    // Summary Statistics
    public int TotalReports { get; set; }
    public double TotalHoursLogged { get; set; }
    public double AverageHoursPerDay { get; set; }
    public double AverageSafetyScore { get; set; }
    public double AverageQualityScore { get; set; }
    
    // Progress Analysis
    public double TotalProgressContribution { get; set; }
    public double AverageProgressPerDay { get; set; }
    public int DaysAheadBehindSchedule { get; set; }
    
    // Issue Analysis
    public int TotalCriticalIssues { get; set; }
    public int WeatherDelayDays { get; set; }
    public List<string> TopIssueCategories { get; set; } = new();
    
    // Team Performance
    public int AverageTeamSize { get; set; }
    public double ProductivityIndex { get; set; }
    public List<PersonnelPerformanceDto> TopPerformers { get; set; } = new();
    
    // Weather Impact
    public Dictionary<string, int> WeatherConditionDays { get; set; } = new();
    public double WeatherImpactScore { get; set; }
    
    // Trends
    public List<DailyTrendDto> ProgressTrend { get; set; } = new();
    public List<DailyTrendDto> SafetyTrend { get; set; } = new();
    public List<DailyTrendDto> QualityTrend { get; set; } = new();
}

public class PersonnelPerformanceDto
{
    public Guid UserId { get; set; }
    public string Name { get; set; } = string.Empty;
    public int ReportsSubmitted { get; set; }
    public double AverageHoursPerDay { get; set; }
    public double AverageSafetyScore { get; set; }
    public double AverageQualityScore { get; set; }
    public double ProductivityScore { get; set; }
}

public class DailyTrendDto
{
    public DateTime Date { get; set; }
    public double Value { get; set; }
    public string? Category { get; set; }
}

/// <summary>
/// Bulk operations DTOs for Daily Reports
/// </summary>
public class DailyReportBulkApprovalRequest
{
    [Required]
    public List<Guid> ReportIds { get; set; } = new();
    
    [StringLength(500, ErrorMessage = "Approval comments cannot exceed 500 characters")]
    public string? Comments { get; set; }
}

public class DailyReportBulkRejectionRequest
{
    [Required]
    public List<Guid> ReportIds { get; set; } = new();
    
    [Required(ErrorMessage = "Rejection reason is required for bulk rejection")]
    [StringLength(1000, ErrorMessage = "Rejection reason cannot exceed 1000 characters")]
    public string RejectionReason { get; set; } = string.Empty;
}

/// <summary>
/// Export and reporting DTOs
/// </summary>
public class DailyReportExportRequest
{
    [Required]
    public Guid ProjectId { get; set; }
    
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    
    [RegularExpression(@"^(csv|excel|pdf|json)$", ErrorMessage = "Format must be csv, excel, pdf, or json")]
    public string Format { get; set; } = "csv";
    
    public bool IncludeAttachments { get; set; } = false;
    public bool IncludeAnalytics { get; set; } = false;
    public List<string> FieldsToInclude { get; set; } = new();
}

/// <summary>
/// Additional DTOs for enhanced daily report functionality
/// </summary>
public class BulkOperationResultDto
{
    public int TotalRequested { get; set; }
    public int SuccessCount { get; set; }
    public int FailureCount { get; set; }
    public List<BulkOperationItemResultDto> Results { get; set; } = new();
    public string Summary { get; set; } = string.Empty;
}

public class BulkOperationItemResultDto
{
    public Guid ItemId { get; set; }
    public bool Success { get; set; }
    public string? ErrorMessage { get; set; }
    public string? Details { get; set; }
}

public class DailyReportInsightsDto
{
    public Guid ProjectId { get; set; }
    public string ProjectName { get; set; } = string.Empty;
    public DateTime GeneratedAt { get; set; }
    
    // Performance Insights
    public List<string> PerformanceInsights { get; set; } = new();
    public List<string> ProductivityRecommendations { get; set; } = new();
    
    // Risk Assessment
    public string RiskLevel { get; set; } = "Low"; // Low, Medium, High, Critical
    public List<string> IdentifiedRisks { get; set; } = new();
    public List<string> RiskMitigationSuggestions { get; set; } = new();
    
    // Progress Analysis
    public bool IsOnTrack { get; set; }
    public double ProgressVelocity { get; set; }
    public int EstimatedDaysToCompletion { get; set; }
    
    // Quality & Safety Insights
    public List<string> SafetyRecommendations { get; set; } = new();
    public List<string> QualityImprovements { get; set; } = new();
    
    // Resource Optimization
    public List<string> ResourceOptimizations { get; set; } = new();
    public List<string> ScheduleOptimizations { get; set; } = new();
    
    // Weather Impact Analysis  
    public List<string> WeatherImpactInsights { get; set; } = new();
    public List<string> WeatherPreparationTips { get; set; } = new();
    
    // Trend Analysis
    public List<TrendInsightDto> Trends { get; set; } = new();
}

public class TrendInsightDto
{
    public string Category { get; set; } = string.Empty;
    public string Trend { get; set; } = string.Empty; // Improving, Declining, Stable
    public string Description { get; set; } = string.Empty;
    public double ChangePercent { get; set; }
    public string Recommendation { get; set; } = string.Empty;
}

public class DailyReportValidationResultDto
{
    public bool IsValid { get; set; }
    public List<string> Errors { get; set; } = new();
    public List<string> Warnings { get; set; } = new();
    public List<string> Suggestions { get; set; } = new();
    public List<ValidationRuleResultDto> RuleResults { get; set; } = new();
    
    // Auto-correction suggestions
    public List<AutoCorrectionDto> AutoCorrections { get; set; } = new();
}

public class ValidationRuleResultDto
{
    public string RuleName { get; set; } = string.Empty;
    public string Severity { get; set; } = string.Empty; // Error, Warning, Info
    public bool Passed { get; set; }
    public string Message { get; set; } = string.Empty;
    public string? Suggestion { get; set; }
}

public class AutoCorrectionDto
{
    public string Field { get; set; } = string.Empty;
    public string CurrentValue { get; set; } = string.Empty;
    public string SuggestedValue { get; set; } = string.Empty;
    public string Reason { get; set; } = string.Empty;
    public double Confidence { get; set; } // 0.0 to 1.0
}

public class DailyReportTemplateDto
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public Guid ProjectId { get; set; }
    public string ProjectType { get; set; } = string.Empty;
    
    // Template Structure
    public List<TemplateFieldDto> Fields { get; set; } = new();
    public List<string> RequiredFields { get; set; } = new();
    public Dictionary<string, object> DefaultValues { get; set; } = new();
    
    // Validation Rules
    public List<TemplateValidationRuleDto> ValidationRules { get; set; } = new();
    
    // Metadata
    public bool IsDefault { get; set; }
    public bool IsActive { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime? UpdatedAt { get; set; }
}

public class TemplateFieldDto
{
    public string Name { get; set; } = string.Empty;
    public string Label { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty; // Text, Number, Date, Select, MultiSelect, Boolean
    public bool IsRequired { get; set; }
    public string? DefaultValue { get; set; }
    public List<string> Options { get; set; } = new(); // For Select/MultiSelect fields
    public Dictionary<string, object> Constraints { get; set; } = new(); // Min, Max, Pattern, etc.
    public string? HelpText { get; set; }
    public int DisplayOrder { get; set; }
}

public class TemplateValidationRuleDto
{
    public string Name { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty; // Required, Range, Pattern, Custom
    public string Field { get; set; } = string.Empty;
    public Dictionary<string, object> Parameters { get; set; } = new();
    public string ErrorMessage { get; set; } = string.Empty;
    public string Severity { get; set; } = "Error"; // Error, Warning, Info
}

/// <summary>
/// Support DTOs for material and equipment logging
/// </summary>
public class CreatePersonnelLogRequest
{
    [Required]
    public Guid UserId { get; set; }
    
    [Required]
    [Range(0.5, 24, ErrorMessage = "Hours worked must be between 0.5 and 24")]
    public double HoursWorked { get; set; }
    
    [StringLength(100, ErrorMessage = "Role cannot exceed 100 characters")]
    public string? Role { get; set; }
    
    [StringLength(500, ErrorMessage = "Special assignments cannot exceed 500 characters")]
    public string? SpecialAssignments { get; set; }
    
    [StringLength(1000, ErrorMessage = "Notes cannot exceed 1000 characters")]
    public string? Notes { get; set; }
}

public class CreateMaterialUsageRequest
{
    [Required]
    public Guid MaterialId { get; set; }
    
    [Required]
    [Range(0.01, double.MaxValue, ErrorMessage = "Quantity must be greater than 0")]
    public double Quantity { get; set; }
    
    [Required]
    [StringLength(20, ErrorMessage = "Unit cannot exceed 20 characters")]
    public string Unit { get; set; } = string.Empty;
    
    [Range(0, double.MaxValue, ErrorMessage = "Unit cost must be non-negative")]
    public decimal? UnitCost { get; set; }
    
    [StringLength(500, ErrorMessage = "Notes cannot exceed 500 characters")]
    public string? Notes { get; set; }
}

public class CreateEquipmentLogRequest
{
    [Required]
    public Guid EquipmentId { get; set; }
    
    [Required]
    [Range(0.1, 24, ErrorMessage = "Hours used must be between 0.1 and 24")]
    public double HoursUsed { get; set; }
    
    [StringLength(50, ErrorMessage = "Condition cannot exceed 50 characters")]
    public string? Condition { get; set; } = "Good";
    
    [StringLength(1000, ErrorMessage = "Issues cannot exceed 1000 characters")]
    public string? Issues { get; set; }
    
    [StringLength(1000, ErrorMessage = "Maintenance notes cannot exceed 1000 characters")]
    public string? MaintenanceNotes { get; set; }
}
