name: CI - Build and Test

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  POSTGRES_PASSWORD: testpassword
  POSTGRES_USER: testuser
  POSTGRES_DB: SolarProjectsDb_Test
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration Release --no-restore

    - name: Verify database connection
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"
      run: |
        echo "Testing database connection..."
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do sleep 1; done'
        echo "Database is ready!"

    - name: Setup test database
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"
      run: |
        echo "Installing EF Core tools..."
        dotnet tool install --global dotnet-ef || echo "EF Core tools already installed"
        echo "Updating database..."
        dotnet ef database update --verbose || echo "Database migration completed or not needed"

    - name: Run tests
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"
        ASPNETCORE_ENVIRONMENT: Testing
      run: |
        echo "Running tests..."
        dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults/
        echo "Tests completed!"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./TestResults/
        fail_ci_if_error: false
        verbose: true

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: solar-projects-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          DOTNET_VERSION=${{ env.DOTNET_VERSION }}

    - name: Test Docker image
      run: |
        echo "Starting Docker container test..."
        
        # Create a test network
        docker network create test-network || true
        
        # Start PostgreSQL for testing
        docker run --name test-postgres -d \
          --network test-network \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_USER=testuser \
          -e POSTGRES_DB=testdb \
          postgres:16
        
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL to be ready..."
        sleep 10
        
        # Start application container
        docker run --name test-container -d \
          --network test-network \
          -p 8080:8080 \
          -e ConnectionStrings__DefaultConnection="Host=test-postgres;Database=testdb;Username=testuser;Password=testpass" \
          -e ASPNETCORE_ENVIRONMENT="Development" \
          -e ASPNETCORE_URLS="http://+:8080" \
          solar-projects-api:${{ github.sha }}
        
        # Wait for container to start
        echo "Waiting for application to start..."
        sleep 20
        
        # Check if container is running
        if docker ps | grep test-container; then
          echo "‚úÖ Container is running successfully"
          
          # Test health endpoint
          echo "Testing health endpoint..."
          for i in {1..10}; do
            if curl -f http://localhost:8080/health; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚è≥ Waiting for health check... ($i/10)"
              sleep 3
            fi
          done
          
          echo "üìã Container logs:"
          docker logs test-container
        else
          echo "‚ùå Container failed to start"
          echo "üìã Container logs:"
          docker logs test-container
          echo "üìã PostgreSQL logs:"
          docker logs test-postgres
          exit 1
        fi
        
        # Cleanup
        echo "Cleaning up..."
        docker stop test-container test-postgres || true
        docker rm test-container test-postgres || true
        docker network rm test-network || true
