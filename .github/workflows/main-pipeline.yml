name: CD - Main Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOTNET_VERSION: '9.0.x'
  POSTGRES_PASSWORD: testpassword
  POSTGRES_USER: testuser
  POSTGRES_DB: SolarProjectsDb_Test
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test Job
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Generate version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.environment }}-${{ github.sha }}"
        else
          VERSION="${{ github.ref_name }}-${{ github.sha }}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration Release --no-restore

    - name: Wait for database
      run: |
        echo "Waiting for database to be ready..."
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do sleep 1; done'
        echo "Database is ready!"

    - name: Setup database
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"
      run: |
        echo "Installing EF Core tools..."
        dotnet tool install --global dotnet-ef || echo "EF Core tools already installed"
        echo "Running database migrations..."
        dotnet ef database update --verbose || echo "No migrations to apply"

    - name: Run tests
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"
        ASPNETCORE_ENVIRONMENT: Testing
      run: |
        dotnet test \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --logger "trx;LogFileName=test-results.trx" \
          --results-directory TestResults/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ steps.version.outputs.version }}
        path: TestResults/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./TestResults/
        fail_ci_if_error: false

  # Docker Build Job
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          DOTNET_VERSION=${{ env.DOTNET_VERSION }}

    - name: Test Docker image locally
      run: |
        echo "Testing Docker image locally..."
        
        # Create test network
        docker network create test-network || true
        
        # Start test database
        docker run --name test-db -d \
          --network test-network \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_USER=testuser \
          -e POSTGRES_DB=testdb \
          postgres:16
        
        # Wait for database
        echo "Waiting for database..."
        sleep 10
        
        # Get the image tag
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        
        # Start application
        docker run --name test-app -d \
          --network test-network \
          -p 8080:8080 \
          -e ConnectionStrings__DefaultConnection="Host=test-db;Database=testdb;Username=testuser;Password=testpass" \
          -e ASPNETCORE_ENVIRONMENT="Development" \
          -e ASPNETCORE_URLS="http://+:8080" \
          ${IMAGE_TAG}
        
        # Wait and test
        echo "Waiting for application..."
        sleep 15
        
        # Test health endpoint
        for i in {1..10}; do
          if curl -f http://localhost:8080/health; then
            echo "✅ Health check passed!"
            SUCCESS=true
            break
          else
            echo "⏳ Health check attempt $i/10..."
            sleep 5
          fi
        done
        
        # Show logs for debugging
        echo "Application logs:"
        docker logs test-app
        
        # Cleanup
        docker stop test-app test-db || true
        docker rm test-app test-db || true
        docker network rm test-network || true
        
        # Exit with error if health check failed
        if [ "$SUCCESS" != "true" ]; then
          echo "❌ Health check failed"
          exit 1
        fi

  # Deploy Job (only on main branch)
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build and publish
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore
        dotnet publish --configuration Release --output ./publish --no-build

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'solar-projects-api'
        package: './publish'

    - name: Verify deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        # Test the deployed application
        for i in {1..10}; do
          if curl -f https://solar-projects-api.azurewebsites.net/health; then
            echo "✅ Deployment verification successful!"
            break
          else
            echo "⏳ Verification attempt $i/10..."
            sleep 10
          fi
        done

    - name: Logout from Azure
      if: always()
      run: az logout
