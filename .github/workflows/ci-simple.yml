name: CI - Build and Test (Simple)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: SolarProjectsDb_Test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration Release --no-restore

    - name: Setup test database
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=SolarProjectsDb_Test;Username=testuser;Password=testpassword"
      run: |
        dotnet tool install --global dotnet-ef
        dotnet ef database update

    - name: Run tests
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=SolarProjectsDb_Test;Username=testuser;Password=testpassword"
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: solar-projects-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --name test-container -d -p 8080:8080 \
          -e ConnectionStrings__DefaultConnection="Host=host.docker.internal;Database=SolarProjectsDb;Username=postgres;Password=password" \
          solar-projects-api:${{ github.sha }}
        sleep 15
        
        # Check if container is running
        if docker ps | grep test-container; then
          echo "✅ Container is running"
          docker logs test-container
        else
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        docker stop test-container
        docker rm test-container
